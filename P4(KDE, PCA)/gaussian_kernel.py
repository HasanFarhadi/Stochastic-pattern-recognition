# -*- coding: utf-8 -*-
"""Gaussian Kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dhdiSBzP4vSvM8JZulA1UpWzNy_ss_gW
"""

import numpy as np
from scipy.stats import multivariate_normal
import pandas as pd
import matplotlib.pyplot as plt
import math
from mpl_toolkits.mplot3d import Axes3D

mu = [[2, 5],
          [8, 1],
          [5, 3]]
cov = [[[2, 0], [0, 2]],
           [[3, 1], [1, 3]],
           [[2, 1], [1, 2]]]

def Generate_Data(mu_s, cov_s, label_sampels_size):
    dataset = pd.DataFrame(data={'X1': [], 'X2': [], 'Y': []})
    for i, mu_cov in enumerate(zip(mu_s, cov_s)):
        mu, cov = mu_cov
        x1, x2 = np.random.multivariate_normal(mu, cov, label_sampels_size).T
        temp = pd.DataFrame(
            data={'X1': x1, 'X2': x2, 'Y': [i]*label_sampels_size})
        dataset = pd.concat([dataset, temp], axis=0)
    return dataset

dataset = Generate_Data(mu, cov, 500)
dataset = np.array(dataset.iloc[:, :2].copy())

np.shape(dataset)

#gaussian function
def GaussianBell(dist, sdev):
    return (1/(math.sqrt(2*math.pi) * sdev)) * math.exp(-(dist**2)/(2*sdev**2))

def ProductKernel(data, x, h, sdev):
    dim = len(data)
    prod = 1
    for j in range(dim):
        prod *= GaussianBell((x[j]-data[j])/h, sdev)
    return prod

def KDE(dataset, h, X_2d, sdev):
    N = np.size(X_2d, 0)
    d = np.size(dataset, 1)  
    probs = []

    for x in X_2d:
        px = 1/N * 1/(h**d) * np.sum([ProductKernel(dataPoint, x, h, sdev) for dataPoint in dataset])
        probs.append(px) 

    return probs

Hs = [0.09, 0.3, 0.6]
sdevs = [0.2,0.6,0.9]

x = np.linspace(np.amin(dataset[:, 0]), np.amax(
    dataset[:, 0]), 20).reshape(-1, 1)
y = np.linspace(np.amin(dataset[:, 1]), np.amax(
    dataset[:, 1]), 20).reshape(-1, 1)
xx, yy = np.meshgrid(x, y)
X_2d = np.concatenate(
    [xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)], axis=1)

ZZ = []
for h in Hs:
    for sigma in sdevs:
        probs = KDE(dataset, h, X_2d, sigma)
        zz = np.array(probs).reshape(xx.shape)
        ZZ.append(zz)

# plot contour plots of KDE
j = -1
for i in range(len(ZZ)):
    if i % len(sdevs) == 0:
        j = j+1
    fig, ax = plt.subplots(1)
    ax.contour(xx, yy, ZZ[i], colors= ['purple','blue','cyan', 'green', 'yellow', 'orange', 'red'])
    ax.set_title('Gaussian Kernel - h('+str(Hs[j])+') - sigma('+str(sdevs[i%len(sdevs)])+')')
    fig.tight_layout()