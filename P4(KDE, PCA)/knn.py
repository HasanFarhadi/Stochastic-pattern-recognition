# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10w6bdRERNljdsRHAw0lwctMIfG18Hf2k
"""

import numpy as np
from scipy.stats import multivariate_normal
import pandas as pd
import matplotlib.pyplot as plt
import math
from mpl_toolkits.mplot3d import Axes3D

mu = [[2, 5],
          [8, 1],
          [5, 3]]
cov = [[[2, 0], [0, 2]],
           [[3, 1], [1, 3]],
           [[2, 1], [1, 2]]]

def Generate_Data(mu_s, cov_s, label_sampels_size):
    dataset = pd.DataFrame(data={'X1': [], 'X2': [], 'Y': []})
    for i, mu_cov in enumerate(zip(mu_s, cov_s)):
        mu, cov = mu_cov
        x1, x2 = np.random.multivariate_normal(mu, cov, label_sampels_size).T
        temp = pd.DataFrame(
            data={'X1': x1, 'X2': x2, 'Y': [i]*label_sampels_size})
        dataset = pd.concat([dataset, temp], axis=0)
    return dataset

dataset = Generate_Data(mu, cov, 500)
data_2d = np.array(dataset.iloc[:, :2].copy())

np.shape(data_2d)

#search radius
def MinRadius(data, x, k):
    distances = np.array([np.linalg.norm(i-x) for i in data])
    return np.sort(distances)[k-1]

#density function
def KNN(dataset, k,X_2d):
    N = np.size(dataset, 1)  
    probs = []  

    for x in X_2d:
        v = math.pi * (MinRadius(dataset,x,k)**2)
        px = k/(N * v)
        probs.append(px)  

    return probs

Ks = [1, 9, 99]

x = np.linspace(np.amin(data_2d[:, 0]), np.amax(
    data_2d[:, 0]), 50).reshape(-1, 1)
y = np.linspace(np.amin(data_2d[:, 1]), np.amax(
    data_2d[:, 1]), 50).reshape(-1, 1)
xx, yy = np.meshgrid(x, y)
X_2d = np.concatenate(
    [xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)], axis=1)
print(X_2d.shape)

probability = []
for k in Ks:
    probs = KNN(data_2d, k,X_2d)
    zz = np.array(probs).reshape(xx.shape)
    probability.append(zz)

for i in range(len(Ks)):
    fig, ax = plt.subplots(1)
    ax.contour(xx, yy, probability[i], colors= ['purple','blue','cyan', 'green', 'yellow', 'orange', 'red'])
    ax.set_title('k('+str(Ks[i])+')')
    fig.tight_layout()